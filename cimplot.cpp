//This file is automatically generated by generator.lua from https://github.com/cimgui/cimplot
//based on implot.h file version 0.17 from implot https://github.com/epezent/implot

#include "./implot/implot.h"
#include "./implot/implot_internal.h"
#include "cimplot.h"

//ImPlotPoint getters manually wrapped for taking getters modifying ImPlotPoint*

ImPlotPoint_getter getter_funcX;
ImPlotPoint_getter getter_funcX2;

ImPlotPoint Wrapper(int idx, void* data)
{
	ImPlotPoint pp;
	getter_funcX(data, idx, &pp);
	return pp;
}

ImPlotPoint Wrapper2(int idx, void* data)
{
	ImPlotPoint pp;
	getter_funcX2(data, idx, &pp);
	return pp;
}

CIMGUI_API ImPlotRect* ImPlotRect_ImPlotRect_Nil(void)
{
    return IM_NEW(ImPlotRect)();
}
CIMGUI_API void ImPlotRect_destroy(ImPlotRect* self)
{
    IM_DELETE(self);
}
CIMGUI_API ImPlotRect* ImPlotRect_ImPlotRect_double(double x_min,double x_max,double y_min,double y_max)
{
    return IM_NEW(ImPlotRect)(x_min,x_max,y_min,y_max);
}
CIMGUI_API bool ImPlotRect_Contains_PlotPoInt(ImPlotRect* self,const ImPlotPoint p)
{
    return self->Contains(p);
}
CIMGUI_API bool ImPlotRect_Contains_double(ImPlotRect* self,double x,double y)
{
    return self->Contains(x,y);
}
CIMGUI_API void ImPlotRect_Size(ImPlotPoint *pOut,ImPlotRect* self)
{
    *pOut = self->Size();
}
CIMGUI_API void ImPlotRect_Clamp_PlotPoInt(ImPlotPoint *pOut,ImPlotRect* self,const ImPlotPoint p)
{
    *pOut = self->Clamp(p);
}
CIMGUI_API void ImPlotRect_Clamp_double(ImPlotPoint *pOut,ImPlotRect* self,double x,double y)
{
    *pOut = self->Clamp(x,y);
}
CIMGUI_API void ImPlotRect_Min(ImPlotPoint *pOut,ImPlotRect* self)
{
    *pOut = self->Min();
}
CIMGUI_API void ImPlotRect_Max(ImPlotPoint *pOut,ImPlotRect* self)
{
    *pOut = self->Max();
}
CIMGUI_API ImPlotStyle* ImPlotStyle_ImPlotStyle(void)
{
    return IM_NEW(ImPlotStyle)();
}
CIMGUI_API void ImPlotStyle_destroy(ImPlotStyle* self)
{
    IM_DELETE(self);
}
CIMGUI_API ImPlotInputMap* ImPlotInputMap_ImPlotInputMap(void)
{
    return IM_NEW(ImPlotInputMap)();
}
CIMGUI_API void ImPlotInputMap_destroy(ImPlotInputMap* self)
{
    IM_DELETE(self);
}
CIMGUI_API ImPlotContext* ImPlot_CreateContext()
{
    return ImPlot::CreateContext();
}
CIMGUI_API void ImPlot_DestroyContext(ImPlotContext* ctx)
{
    return ImPlot::DestroyContext(ctx);
}
CIMGUI_API ImPlotContext* ImPlot_GetCurrentContext()
{
    return ImPlot::GetCurrentContext();
}
CIMGUI_API void ImPlot_SetCurrentContext(ImPlotContext* ctx)
{
    return ImPlot::SetCurrentContext(ctx);
}
CIMGUI_API void ImPlot_SetImGuiContext(ImGuiContext* ctx)
{
    return ImPlot::SetImGuiContext(ctx);
}
CIMGUI_API bool ImPlot_BeginPlot(const char* title_id,const ImVec2 size,ImPlotFlags flags)
{
    return ImPlot::BeginPlot(title_id,size,flags);
}
CIMGUI_API void ImPlot_EndPlot()
{
    return ImPlot::EndPlot();
}
CIMGUI_API bool ImPlot_BeginSubplots(const char* title_id,int rows,int cols,const ImVec2 size,ImPlotSubplotFlags flags,float* row_ratios,float* col_ratios)
{
    return ImPlot::BeginSubplots(title_id,rows,cols,size,flags,row_ratios,col_ratios);
}
CIMGUI_API void ImPlot_EndSubplots()
{
    return ImPlot::EndSubplots();
}
CIMGUI_API void ImPlot_SetupAxis(ImAxis axis,const char* label,ImPlotAxisFlags flags)
{
    return ImPlot::SetupAxis(axis,label,flags);
}
CIMGUI_API void ImPlot_SetupAxisLimits(ImAxis axis,double v_min,double v_max,ImPlotCond cond)
{
    return ImPlot::SetupAxisLimits(axis,v_min,v_max,cond);
}
CIMGUI_API void ImPlot_SetupAxisLinks(ImAxis axis,double* link_min,double* link_max)
{
    return ImPlot::SetupAxisLinks(axis,link_min,link_max);
}
CIMGUI_API void ImPlot_SetupAxisFormat_Str(ImAxis axis,const char* fmt)
{
    return ImPlot::SetupAxisFormat(axis,fmt);
}
CIMGUI_API void ImPlot_SetupAxisFormat_PlotFormatter(ImAxis axis,ImPlotFormatter formatter,void* data)
{
    return ImPlot::SetupAxisFormat(axis,formatter,data);
}
CIMGUI_API void ImPlot_SetupAxisTicks_doublePtr(ImAxis axis,const double* values,int n_ticks,const char* const labels[],bool keep_default)
{
    return ImPlot::SetupAxisTicks(axis,values,n_ticks,labels,keep_default);
}
CIMGUI_API void ImPlot_SetupAxisTicks_double(ImAxis axis,double v_min,double v_max,int n_ticks,const char* const labels[],bool keep_default)
{
    return ImPlot::SetupAxisTicks(axis,v_min,v_max,n_ticks,labels,keep_default);
}
CIMGUI_API void ImPlot_SetupAxisScale_PlotScale(ImAxis axis,ImPlotScale scale)
{
    return ImPlot::SetupAxisScale(axis,scale);
}
CIMGUI_API void ImPlot_SetupAxisScale_PlotTransform(ImAxis axis,ImPlotTransform forward,ImPlotTransform inverse,void* data)
{
    return ImPlot::SetupAxisScale(axis,forward,inverse,data);
}
CIMGUI_API void ImPlot_SetupAxisLimitsConstraints(ImAxis axis,double v_min,double v_max)
{
    return ImPlot::SetupAxisLimitsConstraints(axis,v_min,v_max);
}
CIMGUI_API void ImPlot_SetupAxisZoomConstraints(ImAxis axis,double z_min,double z_max)
{
    return ImPlot::SetupAxisZoomConstraints(axis,z_min,z_max);
}
CIMGUI_API void ImPlot_SetupAxes(const char* x_label,const char* y_label,ImPlotAxisFlags x_flags,ImPlotAxisFlags y_flags)
{
    return ImPlot::SetupAxes(x_label,y_label,x_flags,y_flags);
}
CIMGUI_API void ImPlot_SetupAxesLimits(double x_min,double x_max,double y_min,double y_max,ImPlotCond cond)
{
    return ImPlot::SetupAxesLimits(x_min,x_max,y_min,y_max,cond);
}
CIMGUI_API void ImPlot_SetupLegend(ImPlotLocation location,ImPlotLegendFlags flags)
{
    return ImPlot::SetupLegend(location,flags);
}
CIMGUI_API void ImPlot_SetupMouseText(ImPlotLocation location,ImPlotMouseTextFlags flags)
{
    return ImPlot::SetupMouseText(location,flags);
}
CIMGUI_API void ImPlot_SetupFinish()
{
    return ImPlot::SetupFinish();
}
CIMGUI_API void ImPlot_SetNextAxisLimits(ImAxis axis,double v_min,double v_max,ImPlotCond cond)
{
    return ImPlot::SetNextAxisLimits(axis,v_min,v_max,cond);
}
CIMGUI_API void ImPlot_SetNextAxisLinks(ImAxis axis,double* link_min,double* link_max)
{
    return ImPlot::SetNextAxisLinks(axis,link_min,link_max);
}
CIMGUI_API void ImPlot_SetNextAxisToFit(ImAxis axis)
{
    return ImPlot::SetNextAxisToFit(axis);
}
CIMGUI_API void ImPlot_SetNextAxesLimits(double x_min,double x_max,double y_min,double y_max,ImPlotCond cond)
{
    return ImPlot::SetNextAxesLimits(x_min,x_max,y_min,y_max,cond);
}
CIMGUI_API void ImPlot_SetNextAxesToFit()
{
    return ImPlot::SetNextAxesToFit();
}
CIMGUI_API void ImPlot_PlotLine_FloatPtrInt(const char* label_id,const float* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_doublePtrInt(const char* label_id,const double* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_S8PtrInt(const char* label_id,const ImS8* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_U8PtrInt(const char* label_id,const ImU8* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_S16PtrInt(const char* label_id,const ImS16* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_U16PtrInt(const char* label_id,const ImU16* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_S32PtrInt(const char* label_id,const ImS32* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_U32PtrInt(const char* label_id,const ImU32* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_S64PtrInt(const char* label_id,const ImS64* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_U64PtrInt(const char* label_id,const ImU64* values,int count,double xscale,double xstart,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_FloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_doublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_S8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_U8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_S16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_U16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_S32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_U32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_S64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLine_U64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,ImPlotLineFlags flags,int offset,int stride)
{
    return ImPlot::PlotLine(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotLineG(const char* label_id,ImPlotPoint_getter getter,void* data,int count,ImPlotLineFlags flags)
{
    getter_funcX = getter;
    ImPlot::PlotLineG(label_id,Wrapper,data,count,flags);
}
CIMGUI_API void ImPlot_PlotScatter_FloatPtrInt(const char* label_id,const float* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_doublePtrInt(const char* label_id,const double* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_S8PtrInt(const char* label_id,const ImS8* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_U8PtrInt(const char* label_id,const ImU8* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_S16PtrInt(const char* label_id,const ImS16* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_U16PtrInt(const char* label_id,const ImU16* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_S32PtrInt(const char* label_id,const ImS32* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_U32PtrInt(const char* label_id,const ImU32* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_S64PtrInt(const char* label_id,const ImS64* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_U64PtrInt(const char* label_id,const ImU64* values,int count,double xscale,double xstart,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_FloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_doublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_S8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_U8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_S16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_U16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_S32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_U32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_S64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatter_U64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,ImPlotScatterFlags flags,int offset,int stride)
{
    return ImPlot::PlotScatter(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotScatterG(const char* label_id,ImPlotPoint_getter getter,void* data,int count,ImPlotScatterFlags flags)
{
    getter_funcX = getter;
    ImPlot::PlotScatterG(label_id,Wrapper,data,count,flags);
}
CIMGUI_API void ImPlot_PlotStairs_FloatPtrInt(const char* label_id,const float* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_doublePtrInt(const char* label_id,const double* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_S8PtrInt(const char* label_id,const ImS8* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_U8PtrInt(const char* label_id,const ImU8* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_S16PtrInt(const char* label_id,const ImS16* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_U16PtrInt(const char* label_id,const ImU16* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_S32PtrInt(const char* label_id,const ImS32* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_U32PtrInt(const char* label_id,const ImU32* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_S64PtrInt(const char* label_id,const ImS64* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_U64PtrInt(const char* label_id,const ImU64* values,int count,double xscale,double xstart,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,values,count,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_FloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_doublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_S8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_U8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_S16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_U16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_S32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_U32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_S64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairs_U64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,ImPlotStairsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStairs(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStairsG(const char* label_id,ImPlotPoint_getter getter,void* data,int count,ImPlotStairsFlags flags)
{
    getter_funcX = getter;
    ImPlot::PlotStairsG(label_id,Wrapper,data,count,flags);
}
CIMGUI_API void ImPlot_PlotShaded_FloatPtrInt(const char* label_id,const float* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,yref,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_doublePtrInt(const char* label_id,const double* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,yref,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_S8PtrInt(const char* label_id,const ImS8* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,yref,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_U8PtrInt(const char* label_id,const ImU8* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,yref,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_S16PtrInt(const char* label_id,const ImS16* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,yref,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_U16PtrInt(const char* label_id,const ImU16* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,yref,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_S32PtrInt(const char* label_id,const ImS32* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,yref,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_U32PtrInt(const char* label_id,const ImU32* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,yref,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_S64PtrInt(const char* label_id,const ImS64* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,yref,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_U64PtrInt(const char* label_id,const ImU64* values,int count,double yref,double xscale,double xstart,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,values,count,yref,xscale,xstart,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_FloatPtrFloatPtrInt(const char* label_id,const float* xs,const float* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,yref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_doublePtrdoublePtrInt(const char* label_id,const double* xs,const double* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,yref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_S8PtrS8PtrInt(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,yref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_U8PtrU8PtrInt(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,yref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_S16PtrS16PtrInt(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,yref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_U16PtrU16PtrInt(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,yref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_S32PtrS32PtrInt(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,yref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_U32PtrU32PtrInt(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,yref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_S64PtrS64PtrInt(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,yref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_U64PtrU64PtrInt(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double yref,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys,count,yref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_FloatPtrFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys1,const float* ys2,int count,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_doublePtrdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys1,const double* ys2,int count,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_S8PtrS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys1,const ImS8* ys2,int count,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_U8PtrU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys1,const ImU8* ys2,int count,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_S16PtrS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys1,const ImS16* ys2,int count,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_U16PtrU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys1,const ImU16* ys2,int count,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_S32PtrS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys1,const ImS32* ys2,int count,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_U32PtrU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys1,const ImU32* ys2,int count,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_S64PtrS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys1,const ImS64* ys2,int count,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShaded_U64PtrU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys1,const ImU64* ys2,int count,ImPlotShadedFlags flags,int offset,int stride)
{
    return ImPlot::PlotShaded(label_id,xs,ys1,ys2,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotShadedG(const char* label_id,ImPlotPoint_getter getter1,void* data1,ImPlotPoint_getter getter2,void* data2,int count,ImPlotShadedFlags flags)
{
    getter_funcX = getter1;
    getter_funcX2 = getter2;
    ImPlot::PlotShadedG(label_id,Wrapper,data1,Wrapper2,data2,count,flags);
}
CIMGUI_API void ImPlot_PlotBars_FloatPtrInt(const char* label_id,const float* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,bar_size,shift,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_doublePtrInt(const char* label_id,const double* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,bar_size,shift,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_S8PtrInt(const char* label_id,const ImS8* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,bar_size,shift,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_U8PtrInt(const char* label_id,const ImU8* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,bar_size,shift,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_S16PtrInt(const char* label_id,const ImS16* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,bar_size,shift,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_U16PtrInt(const char* label_id,const ImU16* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,bar_size,shift,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_S32PtrInt(const char* label_id,const ImS32* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,bar_size,shift,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_U32PtrInt(const char* label_id,const ImU32* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,bar_size,shift,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_S64PtrInt(const char* label_id,const ImS64* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,bar_size,shift,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_U64PtrInt(const char* label_id,const ImU64* values,int count,double bar_size,double shift,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,values,count,bar_size,shift,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_FloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,bar_size,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_doublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,bar_size,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_S8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,bar_size,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_U8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,bar_size,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_S16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,bar_size,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_U16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,bar_size,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_S32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,bar_size,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_U32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,bar_size,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_S64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,bar_size,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBars_U64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double bar_size,ImPlotBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotBars(label_id,xs,ys,count,bar_size,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotBarsG(const char* label_id,ImPlotPoint_getter getter,void* data,int count,double bar_size,ImPlotBarsFlags flags)
{
    getter_funcX = getter;
    ImPlot::PlotBarsG(label_id,Wrapper,data,count,bar_size,flags);
}
CIMGUI_API void ImPlot_PlotBarGroups_FloatPtr(const char* const label_ids[],const float* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags)
{
    return ImPlot::PlotBarGroups(label_ids,values,item_count,group_count,group_size,shift,flags);
}
CIMGUI_API void ImPlot_PlotBarGroups_doublePtr(const char* const label_ids[],const double* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags)
{
    return ImPlot::PlotBarGroups(label_ids,values,item_count,group_count,group_size,shift,flags);
}
CIMGUI_API void ImPlot_PlotBarGroups_S8Ptr(const char* const label_ids[],const ImS8* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags)
{
    return ImPlot::PlotBarGroups(label_ids,values,item_count,group_count,group_size,shift,flags);
}
CIMGUI_API void ImPlot_PlotBarGroups_U8Ptr(const char* const label_ids[],const ImU8* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags)
{
    return ImPlot::PlotBarGroups(label_ids,values,item_count,group_count,group_size,shift,flags);
}
CIMGUI_API void ImPlot_PlotBarGroups_S16Ptr(const char* const label_ids[],const ImS16* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags)
{
    return ImPlot::PlotBarGroups(label_ids,values,item_count,group_count,group_size,shift,flags);
}
CIMGUI_API void ImPlot_PlotBarGroups_U16Ptr(const char* const label_ids[],const ImU16* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags)
{
    return ImPlot::PlotBarGroups(label_ids,values,item_count,group_count,group_size,shift,flags);
}
CIMGUI_API void ImPlot_PlotBarGroups_S32Ptr(const char* const label_ids[],const ImS32* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags)
{
    return ImPlot::PlotBarGroups(label_ids,values,item_count,group_count,group_size,shift,flags);
}
CIMGUI_API void ImPlot_PlotBarGroups_U32Ptr(const char* const label_ids[],const ImU32* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags)
{
    return ImPlot::PlotBarGroups(label_ids,values,item_count,group_count,group_size,shift,flags);
}
CIMGUI_API void ImPlot_PlotBarGroups_S64Ptr(const char* const label_ids[],const ImS64* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags)
{
    return ImPlot::PlotBarGroups(label_ids,values,item_count,group_count,group_size,shift,flags);
}
CIMGUI_API void ImPlot_PlotBarGroups_U64Ptr(const char* const label_ids[],const ImU64* values,int item_count,int group_count,double group_size,double shift,ImPlotBarGroupsFlags flags)
{
    return ImPlot::PlotBarGroups(label_ids,values,item_count,group_count,group_size,shift,flags);
}
CIMGUI_API void ImPlot_PlotErrorBars_FloatPtrFloatPtrFloatPtrInt(const char* label_id,const float* xs,const float* ys,const float* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_doublePtrdoublePtrdoublePtrInt(const char* label_id,const double* xs,const double* ys,const double* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_S8PtrS8PtrS8PtrInt(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_U8PtrU8PtrU8PtrInt(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_S16PtrS16PtrS16PtrInt(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_U16PtrU16PtrU16PtrInt(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_S32PtrS32PtrS32PtrInt(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_U32PtrU32PtrU32PtrInt(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_S64PtrS64PtrS64PtrInt(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_U64PtrU64PtrU64PtrInt(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* err,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,err,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_FloatPtrFloatPtrFloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,const float* neg,const float* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_doublePtrdoublePtrdoublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,const double* neg,const double* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_S8PtrS8PtrS8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,const ImS8* neg,const ImS8* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_U8PtrU8PtrU8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,const ImU8* neg,const ImU8* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_S16PtrS16PtrS16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,const ImS16* neg,const ImS16* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_U16PtrU16PtrU16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,const ImU16* neg,const ImU16* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_S32PtrS32PtrS32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,const ImS32* neg,const ImS32* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_U32PtrU32PtrU32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,const ImU32* neg,const ImU32* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_S64PtrS64PtrS64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,const ImS64* neg,const ImS64* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotErrorBars_U64PtrU64PtrU64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,const ImU64* neg,const ImU64* pos,int count,ImPlotErrorBarsFlags flags,int offset,int stride)
{
    return ImPlot::PlotErrorBars(label_id,xs,ys,neg,pos,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_FloatPtrInt(const char* label_id,const float* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,ref,scale,start,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_doublePtrInt(const char* label_id,const double* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,ref,scale,start,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_S8PtrInt(const char* label_id,const ImS8* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,ref,scale,start,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_U8PtrInt(const char* label_id,const ImU8* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,ref,scale,start,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_S16PtrInt(const char* label_id,const ImS16* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,ref,scale,start,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_U16PtrInt(const char* label_id,const ImU16* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,ref,scale,start,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_S32PtrInt(const char* label_id,const ImS32* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,ref,scale,start,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_U32PtrInt(const char* label_id,const ImU32* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,ref,scale,start,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_S64PtrInt(const char* label_id,const ImS64* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,ref,scale,start,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_U64PtrInt(const char* label_id,const ImU64* values,int count,double ref,double scale,double start,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,values,count,ref,scale,start,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_FloatPtrFloatPtr(const char* label_id,const float* xs,const float* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,ref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_doublePtrdoublePtr(const char* label_id,const double* xs,const double* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,ref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_S8PtrS8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,ref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_U8PtrU8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,ref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_S16PtrS16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,ref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_U16PtrU16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,ref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_S32PtrS32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,ref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_U32PtrU32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,ref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_S64PtrS64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,ref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotStems_U64PtrU64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,double ref,ImPlotStemsFlags flags,int offset,int stride)
{
    return ImPlot::PlotStems(label_id,xs,ys,count,ref,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotInfLines_FloatPtr(const char* label_id,const float* values,int count,ImPlotInfLinesFlags flags,int offset,int stride)
{
    return ImPlot::PlotInfLines(label_id,values,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotInfLines_doublePtr(const char* label_id,const double* values,int count,ImPlotInfLinesFlags flags,int offset,int stride)
{
    return ImPlot::PlotInfLines(label_id,values,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotInfLines_S8Ptr(const char* label_id,const ImS8* values,int count,ImPlotInfLinesFlags flags,int offset,int stride)
{
    return ImPlot::PlotInfLines(label_id,values,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotInfLines_U8Ptr(const char* label_id,const ImU8* values,int count,ImPlotInfLinesFlags flags,int offset,int stride)
{
    return ImPlot::PlotInfLines(label_id,values,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotInfLines_S16Ptr(const char* label_id,const ImS16* values,int count,ImPlotInfLinesFlags flags,int offset,int stride)
{
    return ImPlot::PlotInfLines(label_id,values,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotInfLines_U16Ptr(const char* label_id,const ImU16* values,int count,ImPlotInfLinesFlags flags,int offset,int stride)
{
    return ImPlot::PlotInfLines(label_id,values,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotInfLines_S32Ptr(const char* label_id,const ImS32* values,int count,ImPlotInfLinesFlags flags,int offset,int stride)
{
    return ImPlot::PlotInfLines(label_id,values,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotInfLines_U32Ptr(const char* label_id,const ImU32* values,int count,ImPlotInfLinesFlags flags,int offset,int stride)
{
    return ImPlot::PlotInfLines(label_id,values,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotInfLines_S64Ptr(const char* label_id,const ImS64* values,int count,ImPlotInfLinesFlags flags,int offset,int stride)
{
    return ImPlot::PlotInfLines(label_id,values,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotInfLines_U64Ptr(const char* label_id,const ImU64* values,int count,ImPlotInfLinesFlags flags,int offset,int stride)
{
    return ImPlot::PlotInfLines(label_id,values,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotPieChart_FloatPtrPlotFormatter(const char* const label_ids[],const float* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,fmt,fmt_data,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_doublePtrPlotFormatter(const char* const label_ids[],const double* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,fmt,fmt_data,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_S8PtrPlotFormatter(const char* const label_ids[],const ImS8* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,fmt,fmt_data,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_U8PtrPlotFormatter(const char* const label_ids[],const ImU8* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,fmt,fmt_data,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_S16PtrPlotFormatter(const char* const label_ids[],const ImS16* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,fmt,fmt_data,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_U16PtrPlotFormatter(const char* const label_ids[],const ImU16* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,fmt,fmt_data,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_S32PtrPlotFormatter(const char* const label_ids[],const ImS32* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,fmt,fmt_data,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_U32PtrPlotFormatter(const char* const label_ids[],const ImU32* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,fmt,fmt_data,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_S64PtrPlotFormatter(const char* const label_ids[],const ImS64* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,fmt,fmt_data,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_U64PtrPlotFormatter(const char* const label_ids[],const ImU64* values,int count,double x,double y,double radius,ImPlotFormatter fmt,void* fmt_data,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,fmt,fmt_data,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_FloatPtrStr(const char* const label_ids[],const float* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,label_fmt,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_doublePtrStr(const char* const label_ids[],const double* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,label_fmt,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_S8PtrStr(const char* const label_ids[],const ImS8* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,label_fmt,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_U8PtrStr(const char* const label_ids[],const ImU8* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,label_fmt,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_S16PtrStr(const char* const label_ids[],const ImS16* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,label_fmt,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_U16PtrStr(const char* const label_ids[],const ImU16* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,label_fmt,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_S32PtrStr(const char* const label_ids[],const ImS32* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,label_fmt,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_U32PtrStr(const char* const label_ids[],const ImU32* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,label_fmt,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_S64PtrStr(const char* const label_ids[],const ImS64* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,label_fmt,angle0,flags);
}
CIMGUI_API void ImPlot_PlotPieChart_U64PtrStr(const char* const label_ids[],const ImU64* values,int count,double x,double y,double radius,const char* label_fmt,double angle0,ImPlotPieChartFlags flags)
{
    return ImPlot::PlotPieChart(label_ids,values,count,x,y,radius,label_fmt,angle0,flags);
}
CIMGUI_API void ImPlot_PlotHeatmap_FloatPtr(const char* label_id,const float* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
}
CIMGUI_API void ImPlot_PlotHeatmap_doublePtr(const char* label_id,const double* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
}
CIMGUI_API void ImPlot_PlotHeatmap_S8Ptr(const char* label_id,const ImS8* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
}
CIMGUI_API void ImPlot_PlotHeatmap_U8Ptr(const char* label_id,const ImU8* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
}
CIMGUI_API void ImPlot_PlotHeatmap_S16Ptr(const char* label_id,const ImS16* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
}
CIMGUI_API void ImPlot_PlotHeatmap_U16Ptr(const char* label_id,const ImU16* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
}
CIMGUI_API void ImPlot_PlotHeatmap_S32Ptr(const char* label_id,const ImS32* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
}
CIMGUI_API void ImPlot_PlotHeatmap_U32Ptr(const char* label_id,const ImU32* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
}
CIMGUI_API void ImPlot_PlotHeatmap_S64Ptr(const char* label_id,const ImS64* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
}
CIMGUI_API void ImPlot_PlotHeatmap_U64Ptr(const char* label_id,const ImU64* values,int rows,int cols,double scale_min,double scale_max,const char* label_fmt,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,ImPlotHeatmapFlags flags)
{
    return ImPlot::PlotHeatmap(label_id,values,rows,cols,scale_min,scale_max,label_fmt,bounds_min,bounds_max,flags);
}
CIMGUI_API double ImPlot_PlotHistogram_FloatPtr(const char* label_id,const float* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram(label_id,values,count,bins,bar_scale,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram_doublePtr(const char* label_id,const double* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram(label_id,values,count,bins,bar_scale,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram_S8Ptr(const char* label_id,const ImS8* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram(label_id,values,count,bins,bar_scale,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram_U8Ptr(const char* label_id,const ImU8* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram(label_id,values,count,bins,bar_scale,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram_S16Ptr(const char* label_id,const ImS16* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram(label_id,values,count,bins,bar_scale,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram_U16Ptr(const char* label_id,const ImU16* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram(label_id,values,count,bins,bar_scale,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram_S32Ptr(const char* label_id,const ImS32* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram(label_id,values,count,bins,bar_scale,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram_U32Ptr(const char* label_id,const ImU32* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram(label_id,values,count,bins,bar_scale,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram_S64Ptr(const char* label_id,const ImS64* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram(label_id,values,count,bins,bar_scale,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram_U64Ptr(const char* label_id,const ImU64* values,int count,int bins,double bar_scale,ImPlotRange range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram(label_id,values,count,bins,bar_scale,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram2D_FloatPtr(const char* label_id,const float* xs,const float* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram2D(label_id,xs,ys,count,x_bins,y_bins,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram2D_doublePtr(const char* label_id,const double* xs,const double* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram2D(label_id,xs,ys,count,x_bins,y_bins,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram2D_S8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram2D(label_id,xs,ys,count,x_bins,y_bins,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram2D_U8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram2D(label_id,xs,ys,count,x_bins,y_bins,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram2D_S16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram2D(label_id,xs,ys,count,x_bins,y_bins,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram2D_U16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram2D(label_id,xs,ys,count,x_bins,y_bins,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram2D_S32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram2D(label_id,xs,ys,count,x_bins,y_bins,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram2D_U32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram2D(label_id,xs,ys,count,x_bins,y_bins,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram2D_S64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram2D(label_id,xs,ys,count,x_bins,y_bins,range,flags);
}
CIMGUI_API double ImPlot_PlotHistogram2D_U64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,int x_bins,int y_bins,ImPlotRect range,ImPlotHistogramFlags flags)
{
    return ImPlot::PlotHistogram2D(label_id,xs,ys,count,x_bins,y_bins,range,flags);
}
CIMGUI_API void ImPlot_PlotDigital_FloatPtr(const char* label_id,const float* xs,const float* ys,int count,ImPlotDigitalFlags flags,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigital_doublePtr(const char* label_id,const double* xs,const double* ys,int count,ImPlotDigitalFlags flags,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigital_S8Ptr(const char* label_id,const ImS8* xs,const ImS8* ys,int count,ImPlotDigitalFlags flags,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigital_U8Ptr(const char* label_id,const ImU8* xs,const ImU8* ys,int count,ImPlotDigitalFlags flags,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigital_S16Ptr(const char* label_id,const ImS16* xs,const ImS16* ys,int count,ImPlotDigitalFlags flags,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigital_U16Ptr(const char* label_id,const ImU16* xs,const ImU16* ys,int count,ImPlotDigitalFlags flags,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigital_S32Ptr(const char* label_id,const ImS32* xs,const ImS32* ys,int count,ImPlotDigitalFlags flags,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigital_U32Ptr(const char* label_id,const ImU32* xs,const ImU32* ys,int count,ImPlotDigitalFlags flags,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigital_S64Ptr(const char* label_id,const ImS64* xs,const ImS64* ys,int count,ImPlotDigitalFlags flags,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigital_U64Ptr(const char* label_id,const ImU64* xs,const ImU64* ys,int count,ImPlotDigitalFlags flags,int offset,int stride)
{
    return ImPlot::PlotDigital(label_id,xs,ys,count,flags,offset,stride);
}
CIMGUI_API void ImPlot_PlotDigitalG(const char* label_id,ImPlotPoint_getter getter,void* data,int count,ImPlotDigitalFlags flags)
{
    getter_funcX = getter;
    ImPlot::PlotDigitalG(label_id,Wrapper,data,count,flags);
}
CIMGUI_API void ImPlot_PlotImage(const char* label_id,ImTextureID user_texture_id,const ImPlotPoint bounds_min,const ImPlotPoint bounds_max,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 tint_col,ImPlotImageFlags flags)
{
    return ImPlot::PlotImage(label_id,user_texture_id,bounds_min,bounds_max,uv0,uv1,tint_col,flags);
}
CIMGUI_API void ImPlot_PlotText(const char* text,double x,double y,const ImVec2 pix_offset,ImPlotTextFlags flags)
{
    return ImPlot::PlotText(text,x,y,pix_offset,flags);
}
CIMGUI_API void ImPlot_PlotDummy(const char* label_id,ImPlotDummyFlags flags)
{
    return ImPlot::PlotDummy(label_id,flags);
}
CIMGUI_API bool ImPlot_DragPoint(int id,double* x,double* y,const ImVec4 col,float size,ImPlotDragToolFlags flags,bool* out_clicked,bool* out_hovered,bool* held)
{
    return ImPlot::DragPoint(id,x,y,col,size,flags,out_clicked,out_hovered,held);
}
CIMGUI_API bool ImPlot_DragLineX(int id,double* x,const ImVec4 col,float thickness,ImPlotDragToolFlags flags,bool* out_clicked,bool* out_hovered,bool* held)
{
    return ImPlot::DragLineX(id,x,col,thickness,flags,out_clicked,out_hovered,held);
}
CIMGUI_API bool ImPlot_DragLineY(int id,double* y,const ImVec4 col,float thickness,ImPlotDragToolFlags flags,bool* out_clicked,bool* out_hovered,bool* held)
{
    return ImPlot::DragLineY(id,y,col,thickness,flags,out_clicked,out_hovered,held);
}
CIMGUI_API bool ImPlot_DragRect(int id,double* x1,double* y1,double* x2,double* y2,const ImVec4 col,ImPlotDragToolFlags flags,bool* out_clicked,bool* out_hovered,bool* held)
{
    return ImPlot::DragRect(id,x1,y1,x2,y2,col,flags,out_clicked,out_hovered,held);
}
CIMGUI_API void ImPlot_Annotation_Bool(double x,double y,const ImVec4 col,const ImVec2 pix_offset,bool clamp,bool round)
{
    return ImPlot::Annotation(x,y,col,pix_offset,clamp,round);
}
CIMGUI_API void ImPlot_Annotation_Str(double x,double y,const ImVec4 col,const ImVec2 pix_offset,bool clamp,const char* fmt,...)
{
    va_list args;
    va_start(args, fmt);
    ImPlot::AnnotationV(x,y,col,pix_offset,clamp,fmt,args);
    va_end(args);
}
#ifdef CIMGUI_VARGS0
CIMGUI_API void ImPlot_Annotation_Str0(double x,double y,const ImVec4 col,const ImVec2 pix_offset,bool clamp,const char* fmt)
{
    return ImPlot_Annotation_Str(x,y,col,pix_offset,clamp,fmt);
}
#endif
CIMGUI_API void ImPlot_AnnotationV(double x,double y,const ImVec4 col,const ImVec2 pix_offset,bool clamp,const char* fmt,va_list args)
{
    return ImPlot::AnnotationV(x,y,col,pix_offset,clamp,fmt,args);
}
CIMGUI_API void ImPlot_TagX_Bool(double x,const ImVec4 col,bool round)
{
    return ImPlot::TagX(x,col,round);
}
CIMGUI_API void ImPlot_TagX_Str(double x,const ImVec4 col,const char* fmt,...)
{
    va_list args;
    va_start(args, fmt);
    ImPlot::TagXV(x,col,fmt,args);
    va_end(args);
}
#ifdef CIMGUI_VARGS0
CIMGUI_API void ImPlot_TagX_Str0(double x,const ImVec4 col,const char* fmt)
{
    return ImPlot_TagX_Str(x,col,fmt);
}
#endif
CIMGUI_API void ImPlot_TagXV(double x,const ImVec4 col,const char* fmt,va_list args)
{
    return ImPlot::TagXV(x,col,fmt,args);
}
CIMGUI_API void ImPlot_TagY_Bool(double y,const ImVec4 col,bool round)
{
    return ImPlot::TagY(y,col,round);
}
CIMGUI_API void ImPlot_TagY_Str(double y,const ImVec4 col,const char* fmt,...)
{
    va_list args;
    va_start(args, fmt);
    ImPlot::TagYV(y,col,fmt,args);
    va_end(args);
}
#ifdef CIMGUI_VARGS0
CIMGUI_API void ImPlot_TagY_Str0(double y,const ImVec4 col,const char* fmt)
{
    return ImPlot_TagY_Str(y,col,fmt);
}
#endif
CIMGUI_API void ImPlot_TagYV(double y,const ImVec4 col,const char* fmt,va_list args)
{
    return ImPlot::TagYV(y,col,fmt,args);
}
CIMGUI_API void ImPlot_SetAxis(ImAxis axis)
{
    return ImPlot::SetAxis(axis);
}
CIMGUI_API void ImPlot_SetAxes(ImAxis x_axis,ImAxis y_axis)
{
    return ImPlot::SetAxes(x_axis,y_axis);
}
CIMGUI_API void ImPlot_PixelsToPlot_Vec2(ImPlotPoint *pOut,const ImVec2 pix,ImAxis x_axis,ImAxis y_axis)
{
    *pOut = ImPlot::PixelsToPlot(pix,x_axis,y_axis);
}
CIMGUI_API void ImPlot_PixelsToPlot_Float(ImPlotPoint *pOut,float x,float y,ImAxis x_axis,ImAxis y_axis)
{
    *pOut = ImPlot::PixelsToPlot(x,y,x_axis,y_axis);
}
CIMGUI_API void ImPlot_PlotToPixels_PlotPoInt(ImVec2 *pOut,const ImPlotPoint plt,ImAxis x_axis,ImAxis y_axis)
{
    *pOut = ImPlot::PlotToPixels(plt,x_axis,y_axis);
}
CIMGUI_API void ImPlot_PlotToPixels_double(ImVec2 *pOut,double x,double y,ImAxis x_axis,ImAxis y_axis)
{
    *pOut = ImPlot::PlotToPixels(x,y,x_axis,y_axis);
}
CIMGUI_API void ImPlot_GetPlotPos(ImVec2 *pOut)
{
    *pOut = ImPlot::GetPlotPos();
}
CIMGUI_API void ImPlot_GetPlotSize(ImVec2 *pOut)
{
    *pOut = ImPlot::GetPlotSize();
}
CIMGUI_API void ImPlot_GetPlotMousePos(ImPlotPoint *pOut,ImAxis x_axis,ImAxis y_axis)
{
    *pOut = ImPlot::GetPlotMousePos(x_axis,y_axis);
}
CIMGUI_API void ImPlot_GetPlotLimits(ImPlotRect *pOut,ImAxis x_axis,ImAxis y_axis)
{
    *pOut = ImPlot::GetPlotLimits(x_axis,y_axis);
}
CIMGUI_API bool ImPlot_IsPlotHovered()
{
    return ImPlot::IsPlotHovered();
}
CIMGUI_API bool ImPlot_IsAxisHovered(ImAxis axis)
{
    return ImPlot::IsAxisHovered(axis);
}
CIMGUI_API bool ImPlot_IsSubplotsHovered()
{
    return ImPlot::IsSubplotsHovered();
}
CIMGUI_API bool ImPlot_IsPlotSelected()
{
    return ImPlot::IsPlotSelected();
}
CIMGUI_API void ImPlot_GetPlotSelection(ImPlotRect *pOut,ImAxis x_axis,ImAxis y_axis)
{
    *pOut = ImPlot::GetPlotSelection(x_axis,y_axis);
}
CIMGUI_API void ImPlot_CancelPlotSelection()
{
    return ImPlot::CancelPlotSelection();
}
CIMGUI_API void ImPlot_HideNextItem(bool hidden,ImPlotCond cond)
{
    return ImPlot::HideNextItem(hidden,cond);
}
CIMGUI_API bool ImPlot_BeginAlignedPlots(const char* group_id,bool vertical)
{
    return ImPlot::BeginAlignedPlots(group_id,vertical);
}
CIMGUI_API void ImPlot_EndAlignedPlots()
{
    return ImPlot::EndAlignedPlots();
}
CIMGUI_API bool ImPlot_BeginLegendPopup(const char* label_id,ImGuiMouseButton mouse_button)
{
    return ImPlot::BeginLegendPopup(label_id,mouse_button);
}
CIMGUI_API void ImPlot_EndLegendPopup()
{
    return ImPlot::EndLegendPopup();
}
CIMGUI_API bool ImPlot_IsLegendEntryHovered(const char* label_id)
{
    return ImPlot::IsLegendEntryHovered(label_id);
}
CIMGUI_API bool ImPlot_BeginDragDropTargetPlot()
{
    return ImPlot::BeginDragDropTargetPlot();
}
CIMGUI_API bool ImPlot_BeginDragDropTargetAxis(ImAxis axis)
{
    return ImPlot::BeginDragDropTargetAxis(axis);
}
CIMGUI_API bool ImPlot_BeginDragDropTargetLegend()
{
    return ImPlot::BeginDragDropTargetLegend();
}
CIMGUI_API void ImPlot_EndDragDropTarget()
{
    return ImPlot::EndDragDropTarget();
}
CIMGUI_API bool ImPlot_BeginDragDropSourcePlot(ImGuiDragDropFlags flags)
{
    return ImPlot::BeginDragDropSourcePlot(flags);
}
CIMGUI_API bool ImPlot_BeginDragDropSourceAxis(ImAxis axis,ImGuiDragDropFlags flags)
{
    return ImPlot::BeginDragDropSourceAxis(axis,flags);
}
CIMGUI_API bool ImPlot_BeginDragDropSourceItem(const char* label_id,ImGuiDragDropFlags flags)
{
    return ImPlot::BeginDragDropSourceItem(label_id,flags);
}
CIMGUI_API void ImPlot_EndDragDropSource()
{
    return ImPlot::EndDragDropSource();
}
CIMGUI_API ImPlotStyle* ImPlot_GetStyle()
{
    return &ImPlot::GetStyle();
}
CIMGUI_API void ImPlot_StyleColorsAuto(ImPlotStyle* dst)
{
    return ImPlot::StyleColorsAuto(dst);
}
CIMGUI_API void ImPlot_StyleColorsClassic(ImPlotStyle* dst)
{
    return ImPlot::StyleColorsClassic(dst);
}
CIMGUI_API void ImPlot_StyleColorsDark(ImPlotStyle* dst)
{
    return ImPlot::StyleColorsDark(dst);
}
CIMGUI_API void ImPlot_StyleColorsLight(ImPlotStyle* dst)
{
    return ImPlot::StyleColorsLight(dst);
}
CIMGUI_API void ImPlot_PushStyleColor_U32(ImPlotCol idx,ImU32 col)
{
    return ImPlot::PushStyleColor(idx,col);
}
CIMGUI_API void ImPlot_PushStyleColor_Vec4(ImPlotCol idx,const ImVec4 col)
{
    return ImPlot::PushStyleColor(idx,col);
}
CIMGUI_API void ImPlot_PopStyleColor(int count)
{
    return ImPlot::PopStyleColor(count);
}
CIMGUI_API void ImPlot_PushStyleVar_Float(ImPlotStyleVar idx,float val)
{
    return ImPlot::PushStyleVar(idx,val);
}
CIMGUI_API void ImPlot_PushStyleVar_Int(ImPlotStyleVar idx,int val)
{
    return ImPlot::PushStyleVar(idx,val);
}
CIMGUI_API void ImPlot_PushStyleVar_Vec2(ImPlotStyleVar idx,const ImVec2 val)
{
    return ImPlot::PushStyleVar(idx,val);
}
CIMGUI_API void ImPlot_PopStyleVar(int count)
{
    return ImPlot::PopStyleVar(count);
}
CIMGUI_API void ImPlot_SetNextLineStyle(const ImVec4 col,float weight)
{
    return ImPlot::SetNextLineStyle(col,weight);
}
CIMGUI_API void ImPlot_SetNextFillStyle(const ImVec4 col,float alpha_mod)
{
    return ImPlot::SetNextFillStyle(col,alpha_mod);
}
CIMGUI_API void ImPlot_SetNextMarkerStyle(ImPlotMarker marker,float size,const ImVec4 fill,float weight,const ImVec4 outline)
{
    return ImPlot::SetNextMarkerStyle(marker,size,fill,weight,outline);
}
CIMGUI_API void ImPlot_SetNextErrorBarStyle(const ImVec4 col,float size,float weight)
{
    return ImPlot::SetNextErrorBarStyle(col,size,weight);
}
CIMGUI_API void ImPlot_GetLastItemColor(ImVec4 *pOut)
{
    *pOut = ImPlot::GetLastItemColor();
}
CIMGUI_API const char* ImPlot_GetStyleColorName(ImPlotCol idx)
{
    return ImPlot::GetStyleColorName(idx);
}
CIMGUI_API const char* ImPlot_GetMarkerName(ImPlotMarker idx)
{
    return ImPlot::GetMarkerName(idx);
}
CIMGUI_API ImPlotColormap ImPlot_AddColormap_Vec4Ptr(const char* name,const ImVec4* cols,int size,bool qual)
{
    return ImPlot::AddColormap(name,cols,size,qual);
}
CIMGUI_API ImPlotColormap ImPlot_AddColormap_U32Ptr(const char* name,const ImU32* cols,int size,bool qual)
{
    return ImPlot::AddColormap(name,cols,size,qual);
}
CIMGUI_API int ImPlot_GetColormapCount()
{
    return ImPlot::GetColormapCount();
}
CIMGUI_API const char* ImPlot_GetColormapName(ImPlotColormap cmap)
{
    return ImPlot::GetColormapName(cmap);
}
CIMGUI_API ImPlotColormap ImPlot_GetColormapIndex(const char* name)
{
    return ImPlot::GetColormapIndex(name);
}
CIMGUI_API void ImPlot_PushColormap_PlotColormap(ImPlotColormap cmap)
{
    return ImPlot::PushColormap(cmap);
}
CIMGUI_API void ImPlot_PushColormap_Str(const char* name)
{
    return ImPlot::PushColormap(name);
}
CIMGUI_API void ImPlot_PopColormap(int count)
{
    return ImPlot::PopColormap(count);
}
CIMGUI_API void ImPlot_NextColormapColor(ImVec4 *pOut)
{
    *pOut = ImPlot::NextColormapColor();
}
CIMGUI_API int ImPlot_GetColormapSize(ImPlotColormap cmap)
{
    return ImPlot::GetColormapSize(cmap);
}
CIMGUI_API void ImPlot_GetColormapColor(ImVec4 *pOut,int idx,ImPlotColormap cmap)
{
    *pOut = ImPlot::GetColormapColor(idx,cmap);
}
CIMGUI_API void ImPlot_SampleColormap(ImVec4 *pOut,float t,ImPlotColormap cmap)
{
    *pOut = ImPlot::SampleColormap(t,cmap);
}
CIMGUI_API void ImPlot_ColormapScale(const char* label,double scale_min,double scale_max,const ImVec2 size,const char* format,ImPlotColormapScaleFlags flags,ImPlotColormap cmap)
{
    return ImPlot::ColormapScale(label,scale_min,scale_max,size,format,flags,cmap);
}
CIMGUI_API bool ImPlot_ColormapSlider(const char* label,float* t,ImVec4* out,const char* format,ImPlotColormap cmap)
{
    return ImPlot::ColormapSlider(label,t,out,format,cmap);
}
CIMGUI_API bool ImPlot_ColormapButton(const char* label,const ImVec2 size,ImPlotColormap cmap)
{
    return ImPlot::ColormapButton(label,size,cmap);
}
CIMGUI_API void ImPlot_BustColorCache(const char* plot_title_id)
{
    return ImPlot::BustColorCache(plot_title_id);
}
CIMGUI_API ImPlotInputMap* ImPlot_GetInputMap()
{
    return &ImPlot::GetInputMap();
}
CIMGUI_API void ImPlot_MapInputDefault(ImPlotInputMap* dst)
{
    return ImPlot::MapInputDefault(dst);
}
CIMGUI_API void ImPlot_MapInputReverse(ImPlotInputMap* dst)
{
    return ImPlot::MapInputReverse(dst);
}
CIMGUI_API void ImPlot_ItemIcon_Vec4(const ImVec4 col)
{
    return ImPlot::ItemIcon(col);
}
CIMGUI_API void ImPlot_ItemIcon_U32(ImU32 col)
{
    return ImPlot::ItemIcon(col);
}
CIMGUI_API void ImPlot_ColormapIcon(ImPlotColormap cmap)
{
    return ImPlot::ColormapIcon(cmap);
}
CIMGUI_API ImDrawList* ImPlot_GetPlotDrawList()
{
    return ImPlot::GetPlotDrawList();
}
CIMGUI_API void ImPlot_PushPlotClipRect(float expand)
{
    return ImPlot::PushPlotClipRect(expand);
}
CIMGUI_API void ImPlot_PopPlotClipRect()
{
    return ImPlot::PopPlotClipRect();
}
CIMGUI_API bool ImPlot_ShowStyleSelector(const char* label)
{
    return ImPlot::ShowStyleSelector(label);
}
CIMGUI_API bool ImPlot_ShowColormapSelector(const char* label)
{
    return ImPlot::ShowColormapSelector(label);
}
CIMGUI_API bool ImPlot_ShowInputMapSelector(const char* label)
{
    return ImPlot::ShowInputMapSelector(label);
}
CIMGUI_API void ImPlot_ShowStyleEditor(ImPlotStyle* ref)
{
    return ImPlot::ShowStyleEditor(ref);
}
CIMGUI_API void ImPlot_ShowUserGuide()
{
    return ImPlot::ShowUserGuide();
}
CIMGUI_API void ImPlot_ShowMetricsWindow(bool* p_popen)
{
    return ImPlot::ShowMetricsWindow(p_popen);
}
CIMGUI_API void ImPlot_ShowDemoWindow(bool* p_open)
{
    return ImPlot::ShowDemoWindow(p_open);
}

